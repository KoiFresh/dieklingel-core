name: dieklingel-core
title: dieKlingel Core
contact: kai.mayer@dieklingel.com
website: https://dieklingel.de/
license: GPL-3.0
version: 0.1.1+1
summary: The core of the dieKlingel project.
description: The core project containing the most important services to run the door unit.
confinement: strict
compression: lzo
base: core22
grade: stable

architectures:
  - build-on: amd64
  - build-on: arm64

slots:
  dbus-dieklingel-core: # adjust accordingly to your app name
    interface: dbus
    bus: session
    name: com.dieklingel-core # adjust accordingly to your app name and

apps:
  dieklingel-core:
    command-chain: &_command-chain
      - bin/graphics-core22-wrapper
      - bin/wayland-launch
    command: &_command bin/core
    plugs: &_plugs
      - opengl
      - wayland
      - network
      - camera
      - audio-playback
      - audio-record
      - pulseaudio
      - process-control
    slots: &_slots
      - dbus-dieklingel-core
    environment: &_environment
      XDG_DATA_HOME: $SNAP_USER_DATA
      XDG_DATA_DIRS: $SNAP/usr/share
      GDK_GL: gles
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/bin/lib:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET"
      DIEKLINGEL_HOME: "$SNAP_USER_COMMON"
  daemon:
    daemon: simple
    restart-delay: 3s
    restart-condition: always
    command-chain: *_command-chain
    command: *_command
    plugs: *_plugs
    slots: *_slots
    environment: *_environment

# This is one of four snippets that relate to providing the userspace graphics needed by your application.
# You can treat this as "magic" so long as you don't need to make changes.
# On the Mir discourse forum there's a lot more detail on [the graphics-core20 Snap interface](https://discourse.ubuntu.com/t/the-graphics-core20-snap-interface/23000) and it's use.
plugs:
  graphics-core22:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core22

environment:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  LD_LIBRARY_PATH:    $SNAP/graphics/lib
  LIBGL_DRIVERS_PATH: $SNAP/graphics/dri
  LIBVA_DRIVERS_PATH: $SNAP/graphics/dri
  __EGL_VENDOR_LIBRARY_DIRS: $SNAP/graphics/glvnd/egl_vendor.d
  # Other, generally useful environment settings...
  # XDG config
  XDG_CACHE_HOME:  $SNAP_USER_COMMON/.cache
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_CONFIG_DIRS: $SNAP/etc/xdg
  # XKB config
  XKB_CONFIG_ROOT: $SNAP/usr/share/X11/xkb

# The `layout` ensures that files can be found by applications where they are expected by the toolkit or application.
layout:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  # These paths (/usr/share/libdrm and /usr/share/drirc.d) are hardcoded in mesa.
  /usr/share/libdrm:  # Needed by mesa-core20 on AMD GPUs
    bind: $SNAP/graphics/libdrm
  /usr/share/drirc.d:  # Used by mesa-core20 for app specific workarounds
    symlink: $SNAP/graphics/drirc.d
  # Other, generally useful paths
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/icons:
    bind: $SNAP/usr/share/icons
  /usr/share/sounds:
    bind: $SNAP/usr/share/sounds
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # gnome-mastermind & GTK
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0:
    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0
  /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0:
    bind: $SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0
  /usr/share/mime:
    bind: $SNAP/usr/share/mime
  /etc/gtk-3.0:
    bind: $SNAP/etc/gtk-3.0
  /usr/share/X11/XErrorDB:
    symlink: $SNAP/graphics/X11/XErrorDB
  /usr/share/X11/locale:
    symlink: $SNAP/graphics/X11/locale

parts:
  flutter-git:
    source: https://github.com/flutter/flutter.git
    source-branch: '3.12.0'
    plugin: nil
    override-build: |
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/bin
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/libexec
      cp -r $SNAPCRAFT_PART_SRC $SNAPCRAFT_PART_INSTALL/usr/libexec/flutter
      ln -sf $SNAPCRAFT_PART_INSTALL/usr/libexec/flutter/bin/flutter $SNAPCRAFT_PART_INSTALL/usr/bin/flutter
      ln -sf $SNAPCRAFT_PART_INSTALL/usr/libexec/flutter/bin/dart $SNAPCRAFT_PART_INSTALL/usr/bin/dart
      export PATH="$SNAPCRAFT_PART_INSTALL/usr/bin:$PATH"
      flutter doctor
      flutter precache
    build-packages:
      - clang
      - cmake
      - curl
      - ninja-build
      - unzip
    override-prime: ''

  dieklingel-core:
    plugin: nil
    source: .
    after:
      - flutter-git
    build-packages:
      - libgstreamer1.0-dev
      - libgstreamer-plugins-base1.0-dev
    override-build: |
      set -eux
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin/lib
      flutter clean
      flutter pub get
      flutter build linux --release -v
      cp -r build/linux/*/release/bundle/* $SNAPCRAFT_PART_INSTALL/bin/
    stage-packages:
      - libgtk-3-0
      - libgl1
      - libdw-dev
      - libgstreamer-plugins-base1.0-0
      - python3

  # Flutter applications are based on GTK which needs SVG, Gsettings and GLib libraries it needs.
  # The `build-packages`, `override-build` and `override-prime` stanzas are there to incorporate the mime database
  # and pixbuf loaders into the snap.
  # This setup of mime database and pixbuf loaders is done differently for IoT as the snap cannot rely on getting
  # these from the host environment.
  gsettings+pixbuf:
    plugin: nil
    build-packages:
      - libgdk-pixbuf2.0-0
      - librsvg2-common
      - shared-mime-info
    override-build: |
      # Update mime database
      update-mime-database ${SNAPCRAFT_PART_INSTALL}/usr/share/mime
    stage-packages:
      - librsvg2-common
      - gsettings-desktop-schemas
      - libglib2.0-bin
    override-prime: |
      snapcraftctl prime
      # Compile the gsettings schemas
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/glib-2.0/glib-compile-schemas "$SNAPCRAFT_PRIME/usr/share/glib-2.0/schemas"
      # Index the pixbuf loaders
      LOADERS_PATH=$(echo ${SNAPCRAFT_PRIME}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/*/loaders)
      QUERY_LOADERS=/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders
      GDK_PIXBUF_MODULEDIR=${LOADERS_PATH} ${QUERY_LOADERS} > ${LOADERS_PATH}/../loaders.cache
      sed s!$SNAPCRAFT_PRIME!!g --in-place ${LOADERS_PATH}/../loaders.cache

  # Some utility scripts for setting up the Wayland environment
  immodules:
    plugin: nil
    build-packages:
      - libgtk-3-0
    override-build: |
      snapcraftctl build
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/libgtk-3-0/gtk-query-immodules-3.0 > ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/immodules.cache

  # Some utility scripts for setting up the Wayland environment
  wayland-launch:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland graphics-core22 network camera audio-playback audio-record pulseaudio"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/setup.sh
      snapcraftctl build
    stage-packages:
      - inotify-tools

  graphics-core22:
    after:
      - dieklingel-core
    source: https://github.com/MirServer/graphics-core22.git
    plugin: dump
    override-prime: |
      craftctl default
      ${CRAFT_PART_SRC}/bin/graphics-core22-cleanup mesa-core22 nvidia-core22
    prime:
    - bin/graphics-core22-wrapper
